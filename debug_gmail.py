#!/usr/bin/env python3
"""
Script de debug detalhado para problemas de conex√£o Gmail API
"""

import os
import pickle
import json
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

SCOPES = ['https://www.googleapis.com/auth/gmail.modify']

def check_files():
    """Verifica se os arquivos necess√°rios existem"""
    print("üîç Verificando arquivos necess√°rios...")
    
    files_to_check = [
        ('credentials.json', 'Arquivo de credenciais OAuth'),
        ('token.pickle', 'Token de autentica√ß√£o'),
    ]
    
    for filename, description in files_to_check:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            print(f"‚úÖ {filename} - {description} ({size} bytes)")
        else:
            print(f"‚ùå {filename} - {description} (N√ÉO ENCONTRADO)")
    
    print()

def check_credentials_file():
    """Verifica se o arquivo de credenciais √© v√°lido"""
    print("üîç Verificando arquivo de credenciais...")
    
    if not os.path.exists('credentials.json'):
        print("‚ùå Arquivo credentials.json n√£o encontrado!")
        return False
    
    try:
        with open('credentials.json', 'r') as f:
            creds_data = json.load(f)
        
        required_fields = ['installed', 'client_id', 'client_secret', 'auth_uri', 'token_uri']
        
        if 'installed' in creds_data:
            installed = creds_data['installed']
            for field in required_fields:
                if field in installed:
                    print(f"‚úÖ {field}: {installed[field][:20]}...")
                else:
                    print(f"‚ùå {field}: FALTANDO")
                    return False
        else:
            print("‚ùå Campo 'installed' n√£o encontrado no JSON")
            return False
        
        print("‚úÖ Arquivo de credenciais parece v√°lido")
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå Erro ao decodificar JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao ler arquivo: {e}")
        return False

def check_token_file():
    """Verifica se o token √© v√°lido"""
    print("\nüîç Verificando token de autentica√ß√£o...")
    
    if not os.path.exists('token.pickle'):
        print("‚ùå Arquivo token.pickle n√£o encontrado")
        return False
    
    try:
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
        
        print(f"‚úÖ Token carregado: {type(creds).__name__}")
        print(f"   V√°lido: {creds.valid}")
        print(f"   Expirado: {creds.expired}")
        print(f"   Tem refresh token: {hasattr(creds, 'refresh_token') and creds.refresh_token is not None}")
        
        if hasattr(creds, 'scopes'):
            print(f"   Escopos: {creds.scopes}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar token: {e}")
        return False

def test_authentication():
    """Testa o processo de autentica√ß√£o"""
    print("\nüîç Testando autentica√ß√£o...")
    
    creds = None
    
    try:
        # Tenta carregar token existente
        if os.path.exists('token.pickle'):
            with open('token.pickle', 'rb') as token:
                creds = pickle.load(token)
            print("‚úÖ Token carregado do arquivo")
        
        # Verifica se precisa renovar
        if creds and creds.expired and creds.refresh_token:
            print("üîÑ Renovando token expirado...")
            creds.refresh(Request())
            print("‚úÖ Token renovado com sucesso")
            
            # Salva o token renovado
            with open('token.pickle', 'wb') as token:
                pickle.dump(creds, token)
            print("‚úÖ Token renovado salvo")
        
        # Se n√£o h√° credenciais v√°lidas, tenta autenticar
        if not creds or not creds.valid:
            if not os.path.exists('credentials.json'):
                print("‚ùå Arquivo credentials.json n√£o encontrado!")
                return None
            
            print("üîÑ Iniciando fluxo de autentica√ß√£o OAuth...")
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
            print("‚úÖ Autentica√ß√£o OAuth conclu√≠da")
            
            # Salva as credenciais
            with open('token.pickle', 'wb') as token:
                pickle.dump(creds, token)
            print("‚úÖ Credenciais salvas")
        
        return creds
        
    except Exception as e:
        print(f"‚ùå Erro durante autentica√ß√£o: {e}")
        return None

def test_service_creation(creds):
    """Testa a cria√ß√£o do servi√ßo Gmail"""
    print("\nüîç Testando cria√ß√£o do servi√ßo Gmail...")
    
    try:
        service = build('gmail', 'v1', credentials=creds)
        print("‚úÖ Servi√ßo Gmail criado com sucesso")
        return service
    except Exception as e:
        print(f"‚ùå Erro ao criar servi√ßo: {e}")
        return None

def test_basic_api_calls(service):
    """Testa chamadas b√°sicas da API"""
    print("\nüîç Testando chamadas b√°sicas da API...")
    
    tests = [
        ("getProfile", lambda: service.users().getProfile(userId='me').execute()),
        ("listMessages (sem filtro)", lambda: service.users().messages().list(userId='me', maxResults=1).execute()),
        ("listLabels", lambda: service.users().labels().list(userId='me').execute()),
    ]
    
    for test_name, test_func in tests:
        try:
            print(f"üîç Testando: {test_name}")
            result = test_func()
            print(f"‚úÖ {test_name}: OK")
            
            # Mostra algumas informa√ß√µes √∫teis
            if test_name == "getProfile":
                print(f"   Email: {result.get('emailAddress', 'N/A')}")
                print(f"   Total de mensagens: {result.get('messagesTotal', 'N/A')}")
                print(f"   Threads n√£o lidos: {result.get('threadsUnread', 'N/A')}")
            elif test_name == "listMessages (sem filtro)":
                messages = result.get('messages', [])
                print(f"   Mensagens encontradas: {len(messages)}")
                if messages:
                    print(f"   Primeira mensagem ID: {messages[0]['id']}")
            elif test_name == "listLabels":
                labels = result.get('labels', [])
                print(f"   Labels encontrados: {len(labels)}")
                
        except HttpError as error:
            print(f"‚ùå {test_name}: {error}")
            print(f"   Status: {error.resp.status}")
            print(f"   Detalhes: {error.content}")
        except Exception as e:
            print(f"‚ùå {test_name}: {e}")

def test_specific_permissions():
    """Testa permiss√µes espec√≠ficas"""
    print("\nüîç Testando permiss√µes espec√≠ficas...")
    
    try:
        service = build('gmail', 'v1', credentials=creds)
        
        # Testa diferentes opera√ß√µes
        operations = [
            ("Ler perfil", lambda: service.users().getProfile(userId='me').execute()),
            ("Listar mensagens", lambda: service.users().messages().list(userId='me', maxResults=1).execute()),
            ("Ler mensagem", lambda: service.users().messages().get(userId='me', id='test').execute()),
        ]
        
        for op_name, op_func in operations:
            try:
                op_func()
                print(f"‚úÖ {op_name}: Permiss√£o concedida")
            except HttpError as error:
                if error.resp.status == 403:
                    print(f"‚ùå {op_name}: Permiss√£o negada (403)")
                elif error.resp.status == 404:
                    print(f"‚ö†Ô∏è {op_name}: Recurso n√£o encontrado (404) - mas permiss√£o OK")
                else:
                    print(f"‚ùå {op_name}: Erro {error.resp.status}")
                    
    except Exception as e:
        print(f"‚ùå Erro ao testar permiss√µes: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üîß DEBUG DETALHADO - Gmail API")
    print("=" * 50)
    
    # Verifica arquivos
    check_files()
    
    # Verifica credenciais
    if not check_credentials_file():
        print("\n‚ùå Problema com arquivo de credenciais!")
        print("üí° Solu√ß√£o: Baixe um novo arquivo credentials.json do Google Cloud Console")
        return
    
    # Verifica token
    check_token_file()
    
    # Testa autentica√ß√£o
    creds = test_authentication()
    if not creds:
        print("\n‚ùå Falha na autentica√ß√£o!")
        print("üí° Solu√ß√µes:")
        print("   1. Delete o arquivo token.pickle e tente novamente")
        print("   2. Verifique se o arquivo credentials.json est√° correto")
        print("   3. Confirme se a Gmail API est√° ativada")
        return
    
    # Testa cria√ß√£o do servi√ßo
    service = test_service_creation(creds)
    if not service:
        print("\n‚ùå Falha ao criar servi√ßo!")
        return
    
    # Testa chamadas b√°sicas
    test_basic_api_calls(service)
    
    # Testa permiss√µes
    test_specific_permissions()
    
    print("\n" + "=" * 50)
    print("üìä RESUMO DO DEBUG")
    print("=" * 50)
    print("‚úÖ Se chegou at√© aqui, a autentica√ß√£o est√° funcionando")
    print("üí° Se ainda h√° problemas, verifique:")
    print("   1. Se h√° mensagens na sua caixa de entrada")
    print("   2. Se a Gmail API est√° ativada no Google Cloud Console")
    print("   3. Se as credenciais t√™m as permiss√µes corretas")

if __name__ == '__main__':
    main()
